using UnityEngine;

/// <summary>
/// Cthulu 적 오브젝트의 상태 및 행동을 정의한 클래스입니다.
/// EnemyObject를 상속하며, 상태 머신을 통해 Idle, Patrol, Chase, Attack 상태를 관리합니다.
/// </summary>
public class DemonBossObject : EnemyObject
{
    #region State
    public EnemyIdleState idleState { get; private set; }     // 대기 상태
    public EnemyPatrolState patrolState { get; private set; } // 순찰 상태
    public EnemyChaseState chaseState { get; private set; }   // 추격 상태
    public EnemyAttackState attack1State { get; private set; } // 공격 상태
    public EnemyAttackState attack2State { get; private set; } // 공격 상태
    public EnemyAttackState attack3State { get; private set; } // 공격 상태
    #endregion

    protected override void Awake()
    {
        base.Awake();

        // 상태 인스턴스 초기화
        idleState = new EnemyIdleState(this, stateMachine, "Idle");
        patrolState = new EnemyPatrolState(this, stateMachine, "Move");
        chaseState = new EnemyChaseState(this, stateMachine, "Move");
        attack1State = new EnemyAttackState(this, stateMachine, "Attack1");
        attack2State = new EnemyAttackState(this, stateMachine, "Attack2");
        attack3State = new EnemyAttackState(this, stateMachine, "Attack3");
    }

    protected override void Start()
    {
        base.Start();

        // 시작 시 Idle 상태로 초기화
        stateMachine.Initialize(idleState);
    }

    protected override void Update()
    {
        base.Update();
    }

    /// <summary>
    /// 플레이어가 탐지되었을 때 추격 상태로 전환합니다.
    /// </summary>
    public override void EnterPlayerDetection()
    {
        stateMachine.ChangeState(chaseState);
    }

    /// <summary>
    /// 플레이어를 탐지하지 못할 경우 순찰 상태로 전환합니다.
    /// </summary>
    public override void ExitPlayerDetection()
    {
        stateMachine.ChangeState(patrolState);
    }

    /// <summary>
    /// 호출 시 공격 상태로 전환합니다.
    /// 공격 패턴을 랜덤으로 호출합니다.
    /// </summary>
    public override void CallAttackState()
    {
        float rand = Random.value; // 0.0f ~ 1.0f 사이의 float

        if (rand < 0.33f)
        {
            stateMachine.ChangeState(attack1State); // 33%
        }
        else if (rand < 0.66f)
        {
            stateMachine.ChangeState(attack2State); // 33%
        }
        else
        {
            stateMachine.ChangeState(attack3State); // 34%
        }
    }

    /// <summary>
    /// 호출 시 대기 상태로 전환합니다.
    /// </summary>
    public override void CallIdleState()
    {
        stateMachine.ChangeState(idleState);
    }
}
